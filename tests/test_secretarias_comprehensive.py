#!/usr/bin/env python3
"""
Test comprensivo para evaluar el funcionamiento de la herramienta de secretar√≠as.
Eval√∫a consultas espec√≠ficas y generales sobre secretar√≠as de c√°tedras y departamentos.
"""

import time
from base_test import BaseTest


class TestSecretariasComprehensive(BaseTest):
    """Test comprensivo para la herramienta de secretar√≠as."""

    def get_test_description(self) -> str:
        return "Test comprensivo de secretar√≠as - consultas espec√≠ficas y generales"

    def get_test_category(self) -> str:
        return "secretarias"

    def _run_test_logic(self) -> bool:
        """Ejecuta el test comprensivo de secretar√≠as."""
        
        self.log_info("=== TEST COMPRENSIVO DE SECRETAR√çAS ===")
        
        # Lista completa de consultas a probar
        queries = [
            # C√°tedras espec√≠ficas
            "¬øD√≥nde est√° la secretar√≠a de Anatomia C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 3?",
            "¬øD√≥nde est√° la secretar√≠a de Histologia Y Embriologia (Hye) C√°tedra HISTOLOGIA?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra EMBRIOLOGIO?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra BIO Y GEN?",
            "¬øD√≥nde est√° la secretar√≠a de Bioetica 1 Y 2 C√°tedra?",
            "¬øD√≥nde est√° la secretar√≠a de Salud Mental C√°tedra?",
            "¬øD√≥nde est√° la secretar√≠a de Fisio C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            "¬øD√≥nde est√° la secretar√≠a de Bioquimica C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            "¬øD√≥nde est√° la secretar√≠a de Microbiologia 1 Y 2 C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            "¬øD√≥nde est√° la secretar√≠a de Farmacologia 1 Y 2 C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 3?",
            "¬øD√≥nde est√° la secretar√≠a de Toxicologia C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de Medicina Legal C√°tedra?",
            "¬øD√≥nde est√° la secretar√≠a de Salud Publica 1 Y 2 C√°tedra?",
            "¬øD√≥nde est√° la secretar√≠a de Patologia 1 Y 2 C√°tedra?",
            "¬øD√≥nde est√° la secretar√≠a de Familiar?",
            "¬øD√≥nde est√° la secretar√≠a de Inmunologia C√°tedra 1?",
            "¬øD√≥nde est√° la secretar√≠a de la C√°tedra 2?",
            
            # Secretar√≠as administrativas
            "¬øD√≥nde queda la secretar√≠a de Alumnos?",
            "¬øD√≥nde queda la secretar√≠a de Admisi√≥n?",
            "¬øD√≥nde queda la secretar√≠a de Conexas?",
            "¬øD√≥nde queda la secretar√≠a de Graduados?",
            "¬øD√≥nde queda la secretar√≠a de Posgrados?",
            "¬øD√≥nde queda la secretar√≠a de T√≠tulos?",
            "¬øD√≥nde queda la secretar√≠a de Tesorer√≠a?",
            
            # Secretar√≠as de carreras
            "¬øD√≥nde queda la secretar√≠a de Sec. Enfermer√≠a?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Obstetricia?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Hemoterapia?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Inst. Quir.?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Podolog√≠a?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Kinesiolog√≠a?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Nutrici√≥n?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Cosmetolog√≠a?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Prac. Cardio.?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Fonoaudiolog√≠a?",
            "¬øD√≥nde queda la secretar√≠a de Sec. Radiolog√≠a?",
            
            # Departamentos y servicios
            "¬øD√≥nde queda la secretar√≠a de Museo Na√≥n?",
            "¬øD√≥nde queda la secretar√≠a de UBA XXI?",
            "¬øD√≥nde queda la secretar√≠a de Depto. Discapacidad?",
            "¬øD√≥nde queda la secretar√≠a de Depto. G√©nero?",
            "¬øD√≥nde queda la secretar√≠a de SEUBE?",
            "¬øD√≥nde queda la secretar√≠a de PASES Y SIMULTANEIDAD?",
            "¬øD√≥nde queda la secretar√≠a de CICLO BIOMEDICO?",
            "¬øD√≥nde queda la secretar√≠a de CICLO CLINICO?",
            "¬øD√≥nde queda la secretar√≠a de ARCHIVOS?",
            "¬øD√≥nde queda la secretar√≠a de ACTAS Y CERTIFICACIONES?"
        ]
        
        # Inicializar el sistema RAG
        try:
            from rag_system import RAGSystem
            rag = RAGSystem()
            self.log_success("‚úÖ Sistema RAG inicializado correctamente")
        except Exception as e:
            self.log_error(f"‚ùå Error inicializando RAG: {e}")
            return False
        
        # Contadores para estad√≠sticas
        total_queries = len(queries)
        successful_queries = 0
        tool_usage = {}
        response_lengths = []
        
        self.log_info(f"üìä Ejecutando {total_queries} consultas de secretar√≠as...")
        
        # Ejecutar cada consulta
        for i, query in enumerate(queries, 1):
            self.log_info(f"\\nüìã CONSULTA {i}/{total_queries}: \"{query}\"")
            
            try:
                # Procesar consulta
                start_time = time.time()
                result = rag.process_query(query, user_id=f'test_secretarias_{i}', user_name='Test User')
                end_time = time.time()
                
                # Extraer informaci√≥n del resultado
                query_type = result.get('query_type', 'unknown')
                response = result.get('response', '')
                response_length = len(response)
                
                # Contar uso de herramientas
                if query_type in tool_usage:
                    tool_usage[query_type] += 1
                else:
                    tool_usage[query_type] = 1
                
                # Verificar si la consulta fue exitosa (criterio mejorado)
                is_successful = (
                    query_type == 'router_sheets.horarios_secretarias' and 
                    response_length > 30 and
                    ('HORARIOS DE SECRETAR√çAS' in response or 
                     'üìç' in response or  # Respuestas espec√≠ficas con emoji de ubicaci√≥n
                     'SECTOR' in response or  # Contiene informaci√≥n de sector
                     'PISO' in response or  # Contiene informaci√≥n de piso
                     'MAIL' in response)  # Contiene informaci√≥n de contacto
                )
                
                if is_successful:
                    successful_queries += 1
                    self.log_success(f"‚úÖ {query_type} - {response_length} chars - {end_time-start_time:.2f}s")
                else:
                    self.log_warning(f"‚ö†Ô∏è {query_type} - {response_length} chars - {end_time-start_time:.2f}s")
                
                response_lengths.append(response_length)
                
                # Mostrar preview de respuesta para consultas problem√°ticas
                if not is_successful and response_length > 0:
                    preview = response[:150].replace('\\n', ' ')
                    self.log_info(f"   Preview: {preview}...")
                
            except Exception as e:
                self.log_error(f"‚ùå Error en consulta {i}: {e}")
                response_lengths.append(0)
        
        # Generar reporte final
        self.log_info("\\n" + "="*80)
        self.log_info("üìä REPORTE FINAL DEL TEST DE SECRETAR√çAS")
        self.log_info("="*80)
        
        # Estad√≠sticas generales
        success_rate = (successful_queries / total_queries) * 100
        avg_response_length = sum(response_lengths) / len(response_lengths) if response_lengths else 0
        
        self.log_info(f"üìà Estad√≠sticas Generales:")
        self.log_info(f"   Total consultas: {total_queries}")
        self.log_info(f"   Consultas exitosas: {successful_queries}")
        self.log_info(f"   Tasa de √©xito: {success_rate:.1f}%")
        self.log_info(f"   Longitud promedio de respuesta: {avg_response_length:.0f} caracteres")
        
        # Uso de herramientas
        self.log_info(f"\\nüîß Uso de Herramientas:")
        for tool, count in sorted(tool_usage.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_queries) * 100
            self.log_info(f"   {tool}: {count} consultas ({percentage:.1f}%)")
        
        # An√°lisis de problemas
        self.log_info(f"\\nüîç An√°lisis de Problemas:")
        
        if success_rate < 80:
            self.log_warning(f"‚ö†Ô∏è Tasa de √©xito baja ({success_rate:.1f}%)")
            self.log_info("   Posibles problemas:")
            self.log_info("   - Threshold de la herramienta muy alto")
            self.log_info("   - Palabras clave no coinciden con consultas")
            self.log_info("   - Herramienta no filtra por c√°tedra espec√≠fica")
        
        if 'router_sheets.horarios_secretarias' not in tool_usage:
            self.log_error("‚ùå La herramienta de secretar√≠as no se activ√≥ en ninguna consulta")
        elif tool_usage.get('router_sheets.horarios_secretarias', 0) < total_queries * 0.7:
            self.log_warning("‚ö†Ô∏è La herramienta de secretar√≠as se activ√≥ en menos del 70% de las consultas")
        
        # Verificar si las respuestas son espec√≠ficas o gen√©ricas
        if avg_response_length > 800:
            self.log_info("‚ÑπÔ∏è Las respuestas son muy largas - posiblemente devuelve todas las secretar√≠as")
            self.log_info("   Recomendaci√≥n: Implementar filtrado espec√≠fico por c√°tedra")
        
        # Resultado del test
        if success_rate >= 80:
            self.log_success("üéâ TEST EXITOSO: La herramienta de secretar√≠as funciona correctamente")
            return True
        elif success_rate >= 60:
            self.log_warning("‚ö†Ô∏è TEST PARCIALMENTE EXITOSO: La herramienta funciona pero necesita mejoras")
            return True
        else:
            self.log_error("‚ùå TEST FALLIDO: La herramienta de secretar√≠as tiene problemas serios")
            return False


if __name__ == "__main__":
    test = TestSecretariasComprehensive()
    success = test.run_test()
    exit(0 if success else 1)
