---
description: Any request you are asked, consider this rule
globs: 
alwaysApply: false
---
You are an expert in LLM development, prompt engineering, and retrieval-augmented generation (RAG) for educational chatbots, with a focus on Python libraries and tools such as PyTorch, FAISS, FastAPI, OpenAI APIs, and WhatsApp Business API integration.

## Key Principles

- **Concise, Technical Responses:** Provide precise and technical explanations with accurate Python examples.
- **Modular Code Structure:** Separate the project into distinct modules for data preprocessing, embeddings generation, RAG integration, and backend deployment.
- **API Optimization:** Focus on efficient and cost-effective usage of OpenAI APIs.
- **Descriptive Variable Names:** Choose variable names that clearly reflect the components they represent.
- **PEP 8 Compliance:** Follow PEP 8 style guidelines for all Python code.

## LLM API and Development

- **API Access:** Use OpenAI's API for both generation (GPT models) and embeddings.
- **Primary Model:** Leverage gpt-4o-mini for primary model responses.
- **Fallback Model:** Use gpt-4.1-nano as a fallback when needed.
- **API-based Fine-Tuning:** Implement OpenAI's fine-tuning capabilities for model customization.

## RAG (Retrieval-Augmented Generation) Integration

- **Combining Retrieval and Generation:** Implement RAG by coupling OpenAI models with FAISS vector store for document retrieval.
- **Vector Store Implementation:** Use FAISS to store and query embeddings efficiently.
- **OpenAI Embeddings:** Generate embeddings using OpenAI's embedding models (text-embedding-3-small).
- **Document Preprocessing:** Process PDF documents using Marker PDF to maintain structure and context when generating chunks for RAG.

## Backend and Deployment

- **API Backend:** Build the backend using FastAPI for asynchronous and scalable request handling.
- **WhatsApp Integration:** Integrate directly with WhatsApp Business API for messaging.
- **Webhook Management:** Implement webhook verification and message handling for WhatsApp.
- **Modular Deployment:** Maintain separation between preprocessing, embeddings generation, RAG system, and API endpoints.

## Data Processing and Preprocessing

- **Document Extraction:** Use Marker PDF for robust text extraction from PDF documents.
- **Intelligent Chunking:** Implement context-preserving chunking systems that maintain document structure.
- **Metadata Management:** Generate and store comprehensive metadata for document chunks.

## Performance Optimization

- **Embedding Batching:** Process embeddings in batches to optimize API calls.
- **Similarity Threshold Management:** Implement and tune similarity thresholds for retrieval quality.
- **Response Verification:** Implement verification steps to ensure response quality and relevance.

## Dependencies and Technologies

- `openai`
- `faiss-cpu` (or `faiss-gpu` for GPU acceleration)
- `fastapi`, `uvicorn`
- `marker-pdf`
- `numpy`, `pandas`
- `tqdm`
- `pytorch` (for intent classification)
- `requests` (for API interactions)
- `python-dotenv` (for environment configuration)

## Key Conventions

1. **Clear Configuration:** Use environment variables for API keys, model selection, and system parameters.
2. **Modular Project Structure:** Maintain separate scripts for document processing, embeddings creation, RAG system, and API endpoints.
3. **Error Handling:** Implement robust error handling and fallback mechanisms for API interactions.
4. **Logging:** Maintain comprehensive logging throughout the system.
5. **Environment Flexibility:** Support different environments (development/production) with appropriate configurations.

## Additional Guidance

- **Embedding Quality:** Focus on generating high-quality, context-preserving embeddings for accurate retrieval.
- **Intent Classification:** Maintain the intent classification system to provide more targeted responses.
- **User Session Management:** Implement user identification and session management for conversation history.
- **Response Formatting:** Ensure response formatting is optimized for WhatsApp display constraints.

Leverage this architecture to maintain a robust, scalable chatbot system for the UBA Faculty of Medicine, ensuring both conversational fluency and factual accuracy through efficient RAG integration with OpenAI models.
