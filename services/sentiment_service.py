"""
Servicio de an치lisis de sentimiento b치sico para el chatbot UBA.
Implementa an치lisis simple sin dependencias externas costosas.
"""
import re
import logging
from typing import Dict, Any, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class SentimentResult:
    """Resultado del an치lisis de sentimiento."""
    sentiment: str  # 'positive', 'negative', 'neutral', 'urgent'
    confidence: float
    emotional_indicators: list
    suggested_tone: str


class SentimentService:
    """Servicio de an치lisis de sentimiento b치sico para consultas universitarias."""
    
    def __init__(self):
        # Diccionarios de palabras para an치lisis de sentimiento
        self.positive_words = {
            'gracias', 'perfecto', 'excelente', 'genial', 'bueno', 'buena', 'buenos', 'buenas',
            'bien', 'ok', 'okey', 'dale', 'listo', 'entendido', 'claro', 'perfecto',
            'joya', 'b치rbaro', 'buen칤simo', 'fant치stico', 'maravilloso', 'incre칤ble'
        }
        
        self.negative_words = {
            'problema', 'problemas', 'error', 'errores', 'mal', 'mala', 'malos', 'malas',
            'terrible', 'horrible', 'p칠simo', 'desastre', 'confuso', 'confusa', 'dif칤cil',
            'complicado', 'complicada', 'frustrante', 'molesto', 'molesta', 'enojado',
            'enojada', 'furioso', 'furiosa', 'indignado', 'indignada', 'preocupado',
            'preocupada', 'ansioso', 'ansiosa', 'estresado', 'estresada'
        }
        
        self.urgent_words = {
            'urgente', 'urgentemente', 'r치pido', 'r치pidamente', 'ya', 'ahora', 'inmediatamente',
            'emergencia', 'emergencias', 'cr칤tico', 'cr칤tica', 'importante', 'importantes',
            'necesito', 'necesitamos', 'ayuda', 'ay칰dame', 'socorro', 'desesperado',
            'desesperada', 'desesperaci칩n', 'p치nico', 'p치nico', 'asustado', 'asustada'
        }
        
        self.polite_words = {
            'por favor', 'disculpe', 'disculpa', 'perd칩n', 'perdona', 'gracias',
            'muchas gracias', 'mil gracias', 'agradezco', 'agradecido', 'agradecida'
        }
        
        # Patrones para detectar emociones espec칤ficas
        self.emotion_patterns = {
            'frustration': [
                r'no entiendo',
                r'no me sale',
                r'estoy confundido',
                r'estoy confundida',
                r'no s칠 qu칠 hacer',
                r'no encuentro',
                r'no funciona'
            ],
            'urgency': [
                r'necesito.*ya',
                r'urgente.*ayuda',
                r'para.*ayer',
                r'lo antes posible',
                r'sin demora'
            ],
            'confusion': [
                r'no entiendo',
                r'no est치 claro',
                r'confuso',
                r'confusa',
                r'no s칠',
                r'no tengo idea'
            ],
            'gratitude': [
                r'muchas gracias',
                r'mil gracias',
                r'te agradezco',
                r'me ayudaste',
                r'perfecto',
                r'excelente'
            ]
        }
    
    def analyze_sentiment(self, query: str) -> SentimentResult:
        """
        Analiza el sentimiento de una consulta del usuario.
        
        Args:
            query: La consulta del usuario
            
        Returns:
            SentimentResult: Resultado del an치lisis
        """
        query_lower = query.lower().strip()
        
        # Detectar palabras clave
        positive_count = sum(1 for word in self.positive_words if word in query_lower)
        negative_count = sum(1 for word in self.negative_words if word in query_lower)
        urgent_count = sum(1 for word in self.urgent_words if word in query_lower)
        polite_count = sum(1 for word in self.polite_words if word in query_lower)
        
        # Detectar patrones emocionales
        emotional_indicators = self._detect_emotional_patterns(query_lower)
        
        # Determinar sentimiento principal
        sentiment, confidence = self._determine_sentiment(
            positive_count, negative_count, urgent_count, polite_count, emotional_indicators
        )
        
        # Sugerir tono de respuesta
        suggested_tone = self._suggest_response_tone(sentiment, emotional_indicators)
        
        return SentimentResult(
            sentiment=sentiment,
            confidence=confidence,
            emotional_indicators=emotional_indicators,
            suggested_tone=suggested_tone
        )
    
    def _detect_emotional_patterns(self, query_lower: str) -> list:
        """Detecta patrones emocionales espec칤ficos en la consulta."""
        detected_emotions = []
        
        for emotion, patterns in self.emotion_patterns.items():
            for pattern in patterns:
                if re.search(pattern, query_lower):
                    detected_emotions.append(emotion)
                    break
        
        return detected_emotions
    
    def _determine_sentiment(self, positive_count: int, negative_count: int, 
                           urgent_count: int, polite_count: int, 
                           emotional_indicators: list) -> Tuple[str, float]:
        """Determina el sentimiento principal y su confianza."""
        
        # Si hay urgencia, priorizar
        if urgent_count > 0 or 'urgency' in emotional_indicators:
            return 'urgent', min(0.9, 0.6 + (urgent_count * 0.1))
        
        # Si hay frustraci칩n o confusi칩n, es negativo
        if 'frustration' in emotional_indicators or 'confusion' in emotional_indicators:
            return 'negative', 0.8
        
        # Si hay gratitud, es positivo
        if 'gratitude' in emotional_indicators:
            return 'positive', 0.8
        
        # Comparar conteos
        total_emotional_words = positive_count + negative_count
        
        if total_emotional_words == 0:
            return 'neutral', 0.5
        
        if positive_count > negative_count:
            confidence = min(0.9, 0.5 + (positive_count * 0.1))
            return 'positive', confidence
        elif negative_count > positive_count:
            confidence = min(0.9, 0.5 + (negative_count * 0.1))
            return 'negative', confidence
        else:
            return 'neutral', 0.6
    
    def _suggest_response_tone(self, sentiment: str, emotional_indicators: list) -> str:
        """Sugiere el tono apropiado para la respuesta."""
        
        if sentiment == 'urgent':
            return 'empathetic_urgent'
        elif sentiment == 'negative':
            if 'frustration' in emotional_indicators:
                return 'patient_explanatory'
            elif 'confusion' in emotional_indicators:
                return 'clear_supportive'
            else:
                return 'empathetic_helpful'
        elif sentiment == 'positive':
            return 'friendly_encouraging'
        else:
            return 'professional_neutral'
    
    def adjust_response_for_sentiment(self, response: str, sentiment_result: SentimentResult) -> str:
        """
        Ajusta una respuesta bas치ndose en el an치lisis de sentimiento.
        
        Args:
            response: Respuesta original
            sentiment_result: Resultado del an치lisis de sentimiento
            
        Returns:
            str: Respuesta ajustada
        """
        if sentiment_result.sentiment == 'urgent':
            # Agregar indicaci칩n de urgencia
            response = f"游뚿 {response}"
            if "no tengo informaci칩n" not in response.lower():
                response += "\n\nSi necesitas ayuda inmediata, contacta a @cecim.nemed por Instagram."
        
        elif sentiment_result.sentiment == 'negative':
            if 'frustration' in sentiment_result.emotional_indicators:
                response = f"Entiendo tu frustraci칩n. {response}"
            elif 'confusion' in sentiment_result.emotional_indicators:
                response = f"Te explico paso a paso: {response}"
            else:
                response = f"Lamento que tengas este problema. {response}"
        
        elif sentiment_result.sentiment == 'positive':
            # Mantener tono positivo
            if not any(word in response.lower() for word in ['gracias', 'perfecto', 'excelente']):
                response += "\n\n춰Espero que te sea 칰til!"
        
        return response


# Instancia global del servicio
sentiment_service = SentimentService()
