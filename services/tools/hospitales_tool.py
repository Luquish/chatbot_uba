import logging
from typing import Any, Dict, List
import random

from .base import BaseTool, Decision, ToolResult
from config.constants import information_emojis

logger = logging.getLogger(__name__)


class HospitalesTool:
    name = "hospitales"
    priority = 75

    def __init__(self):
        self.config: Dict[str, Any] = {
            'thresholds': {
                'accept': 0.4
            },
            'triggers': {
                'keywords': [
                    'hospital', 'hospitales', 'udh', 'unidad docente hospitalaria',
                    'donde queda', 'd√≥nde queda', 'ubicacion', 'ubicaci√≥n',
                    'direccion', 'direcci√≥n', 'localizacion', 'localizaci√≥n',
                    'mapa', 'como llegar', 'c√≥mo llegar', 'donde esta', 'd√≥nde est√°',
                    'hospital durand', 'hospital cl√≠nicas', 'hospital italiano',
                    'hospital alem√°n', 'hospital brit√°nico', 'hospital franc√©s',
                    'hospital santojanni', 'hospital pirovano', 'hospital ramos mejia',
                    'hospital penna', 'hospital mu√±iz', 'hospital tornu',
                    'hospital zubizarreta', 'hospital alvarez', 'hospital paroissien',
                    'hospital pacheco', 'hospital santamarina', 'hospital bocalandro',
                    'hospital pinto', 'hospital lagleyze', 'hospital ortiz basualdo',
                    'hospital naval', 'hospital militar', 'hospital policia',
                    'hospital de ni√±os', 'hospital pedi√°trico', 'maternidad',
                    'maternidad suizo argentina', 'maternidad sarda', 'maternidad otamendi',
                    'sanatorio', 'clinica', 'cl√≠nica', 'centro medico', 'centro m√©dico'
                ]
            }
        }
        
        # URL del mapa de hospitales
        self.mapa_url = "https://tinyurl.com/MAPA-UDH-CECIM"
        
        # Lista de hospitales conocidos para mejor detecci√≥n
        self.hospitales_conocidos = [
            'durand', 'cl√≠nicas', 'italiano', 'alem√°n', 'brit√°nico', 'franc√©s',
            'santojanni', 'pirovano', 'ramos mejia', 'penna', 'mu√±iz', 'tornu',
            'zubizarreta', 'alvarez', 'paroissien', 'pacheco', 'santamarina',
            'bocalandro', 'pinto', 'lagleyze', 'ortiz basualdo', 'naval',
            'militar', 'policia', 'ni√±os', 'pedi√°trico', 'maternidad',
            'suizo argentina', 'sarda', 'otamendi'
        ]

    def configure(self, config: Dict[str, Any]) -> None:
        if not config:
            return
        self.config.update(config)

    def _rule_score(self, query: str) -> float:
        """Calcula el score basado en keywords y patrones espec√≠ficos."""
        query_l = query.lower()
        keywords: List[str] = self.config.get('triggers', {}).get('keywords', [])
        
        # Score base por keywords
        hits = sum(1 for k in keywords if k in query_l)
        base_score = min(1.0, 0.15 * hits) if hits else 0.0
        
        # Boost si menciona hospitales espec√≠ficos
        hospital_hits = sum(1 for hospital in self.hospitales_conocidos if hospital in query_l)
        hospital_boost = min(0.3, 0.1 * hospital_hits)
        
        # Boost por patrones de ubicaci√≥n
        ubicacion_patterns = ['donde queda', 'd√≥nde queda', 'ubicacion', 'ubicaci√≥n', 'direccion', 'direcci√≥n']
        ubicacion_boost = 0.2 if any(pattern in query_l for pattern in ubicacion_patterns) else 0.0
        
        # Boost por patrones de mapa/navegaci√≥n
        mapa_patterns = ['mapa', 'como llegar', 'c√≥mo llegar', 'localizacion', 'localizaci√≥n']
        mapa_boost = 0.2 if any(pattern in query_l for pattern in mapa_patterns) else 0.0
        
        total_score = base_score + hospital_boost + ubicacion_boost + mapa_boost
        return min(1.0, total_score)

    def can_handle(self, query: str, context: Dict[str, Any]) -> Decision:
        score = self._rule_score(query)
        
        # Boost si el contexto previo fue sobre hospitales
        last_qt = (context or {}).get('last_query_type', '')
        if isinstance(last_qt, str) and 'hospital' in last_qt.lower():
            score = max(score, 0.8)
        
        return Decision(score=score, params={}, reasons=["hospitales_rule_score"])

    def accepts(self, score: float) -> bool:
        accept = float(self.config.get('thresholds', {}).get('accept', 0.6))
        return score >= accept

    def execute(self, query: str, params: Dict[str, Any], context: Dict[str, Any]) -> ToolResult:
        """Genera respuesta con el mapa de hospitales."""
        query_l = query.lower()
        
        # Detectar si menciona un hospital espec√≠fico
        hospital_mencionado = None
        for hospital in self.hospitales_conocidos:
            if hospital in query_l:
                hospital_mencionado = hospital.title()
                break
        
        # Generar respuesta personalizada
        if hospital_mencionado:
            response = self._generate_specific_hospital_response(hospital_mencionado)
        else:
            response = self._generate_general_hospital_response()
        
        return ToolResult(
            response=response, 
            sources=["Mapa de Hospitales UDH-CECIM"], 
            metadata={'hospital_mentioned': hospital_mencionado}
        )

    def _generate_specific_hospital_response(self, hospital: str) -> str:
        """Genera respuesta para un hospital espec√≠fico."""
        emoji = random.choice(information_emojis)
        return (
            f"{emoji} Para encontrar la ubicaci√≥n del **{hospital}** y otros hospitales "
            f"de la Facultad de Medicina UBA, puedes consultar nuestro mapa interactivo:\n\n"
            f"üó∫Ô∏è **Mapa de Hospitales y UDH:**\n"
            f"{self.mapa_url}\n\n"
            f"En este mapa encontrar√°s la ubicaci√≥n exacta del {hospital} junto con "
            f"todos los dem√°s hospitales y Unidades Docentes Hospitalarias (UDH) "
            f"donde se realizan las pr√°cticas de la carrera de Medicina."
        )

    def _generate_general_hospital_response(self) -> str:
        """Genera respuesta general para consultas sobre hospitales."""
        emoji = random.choice(information_emojis)
        return (
            f"{emoji} Para encontrar la ubicaci√≥n de los hospitales y Unidades Docentes "
            f"Hospitalarias (UDH) de la Facultad de Medicina UBA, puedes consultar "
            f"nuestro mapa interactivo:\n\n"
            f"üó∫Ô∏è **Mapa de Hospitales y UDH:**\n"
            f"{self.mapa_url}\n\n"
            f"En este mapa encontrar√°s la ubicaci√≥n de todos los hospitales donde se "
            f"realizan las pr√°cticas de la carrera de Medicina, incluyendo:\n"
            f"‚Ä¢ Hospital Durand\n"
            f"‚Ä¢ Hospital de Cl√≠nicas\n"
            f"‚Ä¢ Hospital Italiano\n"
            f"‚Ä¢ Hospital Alem√°n\n"
            f"‚Ä¢ Y muchos m√°s...\n\n"
            f"¬°El mapa te permitir√° ubicar f√°cilmente cualquier hospital o UDH!"
        )
