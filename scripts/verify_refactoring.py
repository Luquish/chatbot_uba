#!/usr/bin/env python3
"""
Script de verificaci√≥n post-refactoring.
Valida que todos los m√≥dulos se importen y funcionen correctamente.
"""

import sys
import logging
from pathlib import Path

# A√±adir directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """Testear imports de m√≥dulos refactorizados."""
    try:
        # Test imports de m√≥dulos principales
        logger.info("üîç Testeando imports de m√≥dulos principales...")
        
        from core.app_manager import app_manager, AppManager
        logger.info("‚úÖ core.app_manager importado correctamente")
        
        from core.query_processor import QueryProcessor
        logger.info("‚úÖ core.query_processor importado correctamente")
        
        from core.response_generator import ResponseGenerator
        logger.info("‚úÖ core.response_generator importado correctamente")
        
        from core.context_retriever import ContextRetriever
        logger.info("‚úÖ core.context_retriever importado correctamente")
        
        # Test import del sistema RAG refactorizado
        from rag_system import RAGSystem
        logger.info("‚úÖ rag_system refactorizado importado correctamente")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en imports: {str(e)}")
        return False

def test_app_manager():
    """Testear funcionalidad del AppManager."""
    try:
        logger.info("üîç Testeando AppManager...")
        
        from core.app_manager import app_manager
        
        # Test propiedades b√°sicas
        assert hasattr(app_manager, 'environment')
        assert hasattr(app_manager, 'is_rag_ready')
        assert hasattr(app_manager, 'is_telegram_ready')
        logger.info("‚úÖ AppManager tiene todas las propiedades esperadas")
        
        # Test estado del sistema
        status = app_manager.get_system_status()
        assert isinstance(status, dict)
        assert 'environment' in status
        assert 'rag_initialized' in status
        logger.info("‚úÖ AppManager.get_system_status() funciona correctamente")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en AppManager: {str(e)}")
        return False

def test_no_global_variables():
    """Verificar que no hay variables globales problem√°ticas."""
    try:
        logger.info("üîç Verificando eliminaci√≥n de variables globales...")
        
        # Leer main.py y verificar que no hay variables globales problem√°ticas
        with open(project_root / 'main.py', 'r') as f:
            content = f.read()
        
        # Verificar que no hay estas l√≠neas problem√°ticas
        problematic_patterns = [
            'global rag_system',
            'rag_system = None',
            'rag_initialized = False'
        ]
        
        found_problems = []
        for pattern in problematic_patterns:
            if pattern in content:
                found_problems.append(pattern)
        
        if found_problems:
            logger.error(f"‚ùå Variables globales problem√°ticas encontradas: {found_problems}")
            return False
        
        logger.info("‚úÖ No se encontraron variables globales problem√°ticas")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error verificando variables globales: {str(e)}")
        return False

def test_compilation():
    """Testear compilaci√≥n de archivos principales."""
    try:
        logger.info("üîç Testeando compilaci√≥n de archivos...")
        
        import py_compile
        
        files_to_test = [
            'main.py',
            'rag_system.py',
            'core/app_manager.py',
            'core/query_processor.py',
            'core/response_generator.py',
            'core/context_retriever.py'
        ]
        
        for file_path in files_to_test:
            full_path = project_root / file_path
            if full_path.exists():
                py_compile.compile(str(full_path), doraise=True)
                logger.info(f"‚úÖ {file_path} compila correctamente")
            else:
                logger.warning(f"‚ö†Ô∏è Archivo no encontrado: {file_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en compilaci√≥n: {str(e)}")
        return False

def main():
    """Funci√≥n principal."""
    logger.info("üöÄ INICIANDO VERIFICACI√ìN POST-REFACTORING")
    logger.info("=" * 60)
    
    tests = [
        ("Imports de m√≥dulos", test_imports),
        ("Funcionalidad AppManager", test_app_manager),
        ("Eliminaci√≥n de variables globales", test_no_global_variables),
        ("Compilaci√≥n de archivos", test_compilation)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã Ejecutando: {test_name}")
        logger.info("-" * 40)
        
        if test_func():
            passed += 1
            logger.info(f"‚úÖ {test_name}: PASSED")
        else:
            logger.info(f"‚ùå {test_name}: FAILED")
    
    logger.info("\n" + "=" * 60)
    logger.info("üìä RESUMEN DE VERIFICACI√ìN")
    logger.info(f"‚úÖ Tests pasados: {passed}/{total}")
    logger.info(f"‚ùå Tests fallidos: {total - passed}/{total}")
    logger.info("=" * 60)
    
    if passed == total:
        logger.info("üéâ ¬°REFACTORING VERIFICADO EXITOSAMENTE!")
        logger.info("‚úÖ Todos los m√≥dulos funcionan correctamente")
        logger.info("‚úÖ Variables globales eliminadas")
        logger.info("‚úÖ Arquitectura modular implementada")
        return True
    else:
        logger.info("‚ùå REFACTORING REQUIERE CORRECCIONES")
        logger.info("Revisa los errores anteriores")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)