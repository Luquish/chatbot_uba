#!/usr/bin/env python3
"""
Script para configurar la base de datos PostgreSQL con pgvector.
Este script configura las tablas necesarias para el sistema RAG del chatbot UBA.
"""

import os
import sys
import logging
from pathlib import Path

# A√±adir el directorio ra√≠z al path para importar m√≥dulos
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from db.connection import test_connection, get_engine
from db.models import create_tables, get_table_info
from services.vector_db_service import VectorDBService

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """Funci√≥n principal para configurar la base de datos."""
    
    print("üöÄ Configurando base de datos PostgreSQL para el chatbot UBA...")
    print("=" * 60)
    
    # 1. Probar conexi√≥n
    print("1. Probando conexi√≥n a la base de datos...")
    if not test_connection():
        print("‚ùå Error: No se pudo conectar a la base de datos")
        print("   Verifica que las variables de entorno est√©n configuradas:")
        print("   - DB_USER, DB_PASS, DB_NAME")
        print("   - CLOUD_SQL_CONNECTION_NAME (si usas Cloud SQL)")
        return False
    
    print("‚úÖ Conexi√≥n establecida exitosamente")
    
    # 2. Crear tablas
    print("\n2. Creando tablas y extensiones...")
    try:
        engine = get_engine()
        create_tables(engine)
        print("‚úÖ Tablas creadas exitosamente")
    except Exception as e:
        print(f"‚ùå Error al crear tablas: {str(e)}")
        return False
    
    # 3. Verificar tablas
    print("\n3. Verificando estructura de la base de datos...")
    try:
        table_info = get_table_info(engine)
        if table_info:
            print("üìä Informaci√≥n de la base de datos:")
            print(f"   - Extensi√≥n pgvector: {'‚úÖ' if table_info['vector_extension'] else '‚ùå'}")
            print(f"   - Tabla embeddings: {'‚úÖ' if table_info['embeddings_table_exists'] else '‚ùå'}")
            print(f"   - Tabla documents: {'‚úÖ' if table_info['documents_table_exists'] else '‚ùå'}")
            print(f"   - Embeddings almacenados: {table_info['embeddings_count']}")
            print(f"   - Documentos almacenados: {table_info['documents_count']}")
        else:
            print("‚ùå No se pudo obtener informaci√≥n de las tablas")
            return False
    except Exception as e:
        print(f"‚ùå Error al verificar tablas: {str(e)}")
        return False
    
    # 4. Crear √≠ndices
    print("\n4. Creando √≠ndices para optimizar b√∫squedas...")
    try:
        vector_service = VectorDBService()
        if vector_service.create_index():
            print("‚úÖ √çndices creados exitosamente")
        else:
            print("‚ö†Ô∏è Warning: Algunos √≠ndices podr√≠an no haberse creado")
    except Exception as e:
        print(f"‚ùå Error al crear √≠ndices: {str(e)}")
        return False
    
    # 5. Verificaci√≥n final
    print("\n5. Verificaci√≥n final del servicio...")
    try:
        vector_service = VectorDBService()
        if vector_service.test_connection():
            stats = vector_service.get_database_stats()
            print("‚úÖ Servicio de base de datos vectorial funcionando correctamente")
            print(f"   - Total de embeddings: {stats.get('total_embeddings', 0)}")
            print(f"   - Documentos √∫nicos: {stats.get('unique_documents', 0)}")
        else:
            print("‚ùå Error en la verificaci√≥n final del servicio")
            return False
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n final: {str(e)}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ ¬°Base de datos configurada exitosamente!")
    print("   El sistema RAG del chatbot UBA est√° listo para usar PostgreSQL con pgvector.")
    print("\nüìù Pr√≥ximos pasos:")
    print("   1. Aseg√∫rate de que tu archivo .env tenga las variables de Cloud SQL")
    print("   2. Ejecuta el chatbot para probar la nueva configuraci√≥n")
    print("   3. Los embeddings se almacenar√°n autom√°ticamente en PostgreSQL")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)